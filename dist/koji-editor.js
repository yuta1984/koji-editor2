!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.KojiEditor=t():e.KojiEditor=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";var r=this&&this.__decorate||function(e,t,n,r){var i,o=arguments.length,s=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,n,s):i(t,n))||s);return o>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0});var i=n(10);function o(e){return function(t,n,r){var i=r.value;r.value=function(){this.prevState=this.state,i.apply(this,arguments),this.$trigger(e)}}}var s=new(function(){function e(){this.state={src:{text:""},requestedSrc:"",selection:{start:0,end:0},requestedSelection:{start:0,end:0},selectedRects:[],caretPos:{x:0,y:0},input:{text:"",selection:{start:0,end:0}},scroll:0,scrollWidth:0,editorSize:{width:0,height:0},focus:!1,compositionActive:!1,compositionText:"",compositionRects:[],keyboardEvent:null,proposedCaretPos:0},this.handlers={src:[],requestedSrc:[],selection:[],requestedSelection:[],selectedRects:[],input:[],focus:[],scroll:[],scrollWidth:[],editorSize:[],caretPos:[],compositionActive:[],compositionText:[],compositionRects:[],keyboardEvent:[],proposedCaretPos:[]}}return Object.defineProperty(e.prototype,"selectedText",{get:function(){var e=this.state.selection,t=e.start,n=e.end;return this.state.src.text.slice(t,t+n)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectionWithLineNum",{get:function(){for(var e=this.state.selection,t=e.start,n=e.end,r=this.state.src.text,i=0,o=0,s=0,a=0,l=0;l<n;l++)l<t&&("\n"===r[l]?(i++,o=0):o++),l<=n&&("\n"===r[l]?(s++,a=0):a++);return{start:{linenum:i,pos:o},end:{linenum:s,pos:a}}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lines",{get:function(){return this.state.src.text.split("\n")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"prevSelectedLines",{get:function(){for(var e=0,t=0,n=this.state.input.text,r=this.state.input.selection,i=0;i<r.end;i++)"\n"==n.charAt(i)&&(i<=r.start&&e++,i<=r.end&&t++);return{start:e,end:t}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentSelectedLines",{get:function(){for(var e=0,t=0,n=this.state.src.text,r=this.state.selection,i=0;i<r.end;i++)"\n"==n.charAt(i)&&(i<=r.start&&e++,i<=r.end&&t++);return{start:e,end:t}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentLine",{get:function(){return this.state.src.text.split("\n")[this.currentSelectedLines.end]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentPos",{get:function(){var e=this.state.selection,t=this.state.src.text.slice(0,e.end).split("\n");return{line:t.length-1,char:t[t.length-1].length}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"prevPos",{get:function(){var e=this.state.input.selection,t=this.state.input.text.slice(0,e.end).split("\n");return 0==t.length?{line:0,char:0}:{line:t.length-1,char:t[t.length-1].length}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"prevLine",{get:function(){return this.state.src.text.split("\n")[this.currentSelectedLines.start-1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nextLine",{get:function(){return this.state.src.text.split("\n")[this.currentSelectedLines.end+1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isRegionSelected",{get:function(){return this.state.selection.start!=this.state.selection.end},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputHasSelection",{get:function(){var e=this.state.input.selection;return e.start!=e.end},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nextChar",{get:function(){var e=this.state.input.selection.end;return this.state.input.text[e]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"prevChar",{get:function(){var e=this.state.input.selection.start;return this.state.input.text[e-1]},enumerable:!0,configurable:!0}),e.prototype.SET_REQUESTED_SRC=function(e){this.state.requestedSrc=e},e.prototype.SET_INPUT=function(e){this.state.input.inputEvent=e.inputEvent,this.state.input.selection=this.state.selection,this.state.input.text=this.state.src.text,this.state.src.text=e.srcText,this.state.selection=e.selection},e.prototype.SET_FOCUS=function(e){this.state.focus=e},e.prototype.SET_SELECTION=function(e){this.state.selection=e},e.prototype.SET_REQUESTED_SELECTION=function(e){this.state.requestedSelection=e},e.prototype.SET_SELETECTED_RECTS=function(e){this.state.selectedRects=e},e.prototype.SET_SCROLL=function(e){this.state.scroll=e},e.prototype.SET_SCROLL_WIDTH=function(e){this.state.scrollWidth=e},e.prototype.SET_EDITOR_SIZE=function(e,t){this.state.editorSize={width:e,height:t}},e.prototype.SET_CARET_POS=function(e,t){this.state.caretPos={x:e,y:t}},e.prototype.SET_COMPOSITION_ACTIVE=function(e){this.state.compositionActive=e},e.prototype.SET_COMPOSITION_TEXT=function(e){this.state.compositionText=e},e.prototype.SET_COMPOSITION_RECTS=function(e){this.state.compositionRects=e},e.prototype.SET_KEYBOARD_EVENT=function(e){this.state.keyboardEvent=e},e.prototype.SET_PROPOSED_CARET_POS=function(e){this.state.proposedCaretPos=e},e.prototype.$trigger=function(e){var t=this;i.isArray(e)?e.forEach((function(e){t.handlers[e].forEach((function(e){e.apply(this)}))})):this.handlers[e].forEach((function(e){e.apply(this)}))},e.prototype.$watch=function(e,t){var n=this;i.isArray(e)?e.forEach((function(e){return n.handlers[e].push(t)})):this.handlers[e].push(t)},r([o("requestedSrc")],e.prototype,"SET_REQUESTED_SRC",null),r([o("src")],e.prototype,"SET_INPUT",null),r([o("focus")],e.prototype,"SET_FOCUS",null),r([o("selection")],e.prototype,"SET_SELECTION",null),r([o("requestedSelection")],e.prototype,"SET_REQUESTED_SELECTION",null),r([o("selectedRects")],e.prototype,"SET_SELETECTED_RECTS",null),r([o("scroll")],e.prototype,"SET_SCROLL",null),r([o("scrollWidth")],e.prototype,"SET_SCROLL_WIDTH",null),r([o("editorSize")],e.prototype,"SET_EDITOR_SIZE",null),r([o("caretPos")],e.prototype,"SET_CARET_POS",null),r([o("compositionActive")],e.prototype,"SET_COMPOSITION_ACTIVE",null),r([o("compositionText")],e.prototype,"SET_COMPOSITION_TEXT",null),r([o("compositionRects")],e.prototype,"SET_COMPOSITION_RECTS",null),r([o("keyboardEvent")],e.prototype,"SET_KEYBOARD_EVENT",null),r([o("proposedCaretPos")],e.prototype,"SET_PROPOSED_CARET_POS",null),e}());window.store=s,t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.components=[]}return e.prototype.observeEl=function(e,t){for(var n in e)this.$el.addEventListener(n,t)},e.prototype.h=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=document.createElement(e),i=0,o=t;i<o.length;i++){var s=o[i];r.classList.add(s)}return r},e.prototype.add=function(e){this.components.push(e),this.$el.appendChild(e.$el)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.pos=0,this.line=0,this.col=0,this.input=e}return e.prototype.next=function(){var e=this.input.charAt(this.pos++);return"\n"===e?(this.line++,this.col=0):this.col++,e},e.prototype.peek=function(){return this.input[this.pos]},e.prototype.eof=function(){return void 0===this.peek()},e.prototype.croak=function(e){throw new Error(e+" ("+this.line+":"+this.col+")")},e}();t.InputStream=r;var i=function(){function e(e){this.current=null,this.is=new r(e)}return e.prototype.peek=function(){return this.current||(this.current=this.readNext())},e.prototype.next=function(){var e=this.current;return this.current=null,e||this.readNext()},e.prototype.eof=function(){return null==this.peek()},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(4);var r=n(8);t.Editor=r.default},function(e,t,n){var r=n(5),i=n(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},s=(r(e.i,i,o),i.locals?i.locals:{});e.exports=s},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s={};function a(e,t,n){for(var r=0;r<t.length;r++){var i={css:t[r][1],media:t[r][2],sourceMap:t[r][3]};s[e][r]?s[e][r](i):s[e].push(y(i,n))}}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function d(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,h=0;function y(e,t){var n,r,i;if(t.singleton){var o=h++;n=f||(f=l(t)),r=p.bind(null,n,o,!1),i=p.bind(null,n,o,!0)}else n=l(t),r=d.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t,n){return(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=i()),e=n.base?e+n.base:e,t=t||[],s[e]||(s[e]=[]),a(e,t,n),function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){s[e]||(s[e]=[]),a(e,t,n);for(var r=t.length;r<s[e].length;r++)s[e][r]();s[e].length=t.length,0===s[e].length&&delete s[e]}}}},function(e,t,n){(t=n(7)(!1)).push([e.i,"@import url(http://fonts.googleapis.com/earlyaccess/notosansjapanese.css);"]),t.push([e.i,'@keyframes blink{75%{opacity:0}}.koji-editor-textarea{width:500px;height:500px;margin:0;padding:0;border:none;font-size:14px;font-family:"Noto Sans JP", sans-serif;transform:rotate(90deg);opacity:0.3;position:fixed;top:100px;left:100px;z-index:999999;line-height:20px;overflow-y:scroll}.koji-editor-display{width:500px;height:500px;margin:0;padding:0;border:none;font-size:14px;font-family:"Noto Sans JP", sans-serif;top:100px;left:100px;border:1px solid #b4b4b4;position:fixed;writing-mode:vertical-rl;overflow-x:scroll;overflow-y:hidden}.koji-editor-display .koji-editor-overlay{position:absolute;height:100%;min-width:100%;writing-mode:vertical-rl;position:relative}.koji-editor-display .koji-editor-overlay .koji-editor-caret{position:absolute;border-top:1px solid black;width:16px;height:1px;animation:blink 1s step-end infinite}.koji-editor-display .koji-editor-overlay .koji-editor-selection{position:absolute;background:#f00;opacity:0.5;z-index:100}.koji-editor-display .koji-editor-overlay .koji-editor-composition-bar{position:absolute;border-left:1px solid black;z-index:101}.koji-editor-display .koji-editor-src-panel{min-width:100%;position:absolute;height:100%;writing-mode:vertical-rl}.koji-editor-display .koji-editor-src-panel .koji-editor-line{min-width:20px;line-height:20px;height:100%;margin:0;padding:0;border:none}.koji-editor-display .koji-editor-src-panel .FURIGANA_START,.koji-editor-display .koji-editor-src-panel .FURIGANA,.koji-editor-display .koji-editor-src-panel .FURIGANA_END{color:blue}.koji-editor-display .koji-editor-src-panel .UNKNOWN{background-color:yellow}.koji-editor-display .koji-editor-src-panel .ANNO_START,.koji-editor-display .koji-editor-src-panel .ANNO_END,.koji-editor-display .koji-editor-src-panel .ANNOTATION{color:red}\n',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var s,a,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r=0;r<e.length;r++){var i=[].concat(e[r]);n&&(i[2]?i[2]="".concat(n," and ").concat(i[2]):i[2]=n),t.push(i)}},t}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(9),s=n(14),a=n(1),l=n(0),u=function(e){function t(t,n){var r=e.call(this)||this;return r.$el=document.createElement("div"),r.$el.classList.add("koji-editor"),r.add(new o.default),r.add(new s.default),t.appendChild(r.$el),l.default.SET_REQUESTED_SRC(n),r}return i(t,e),t}(a.default);t.default=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),s=function(e){function t(){var t=e.call(this)||this;return t.$el=document.createElement("textarea"),t.$el.classList.add("koji-editor-textarea"),t.observeFocus(),t.observeInput(),t.observeSelection(),t.observeScroll(),t.observeResize(),t.observeComposition(),t.observeKeyEvent(),setTimeout((function(){return o.default.SET_EDITOR_SIZE(t.$el.clientWidth,t.$el.clientHeight)}),100),o.default.$watch("requestedSrc",(function(){var e=o.default.state.requestedSrc;t.$el.value=e,o.default.SET_INPUT({srcText:e,selection:{start:0,end:0}})})),o.default.$watch("requestedSelection",(function(){var e=o.default.state.requestedSelection;t.$el.selectionStart=e.start,t.$el.selectionEnd=e.end})),t}return i(t,e),t.prototype.observeFocus=function(){this.$el.addEventListener("focus",(function(){o.default.SET_FOCUS(!0)})),this.$el.addEventListener("blur",(function(){o.default.SET_FOCUS(!1)}))},t.prototype.observeInput=function(){var e=this;this.$el.addEventListener("input",(function(t){o.default.SET_INPUT({srcText:e.$el.value,inputEvent:t,selection:{start:e.$el.selectionStart,end:e.$el.selectionEnd}})})),o.default.SET_SELECTION({start:this.$el.selectionStart,end:this.$el.selectionEnd})},t.prototype.observeSelection=function(){var e=this;document.addEventListener("selectionchange",(function(){document.activeElement==e.$el&&(e.$el.selectionStart===o.default.state.selection.start&&e.$el.selectionEnd===o.default.state.selection.end||o.default.SET_SELECTION({start:e.$el.selectionStart,end:e.$el.selectionEnd}))}))},t.prototype.observeScroll=function(){var e=this;this.$el.addEventListener("scroll",(function(t){o.default.SET_SCROLL_WIDTH(e.$el.scrollHeight),o.default.SET_SCROLL(e.$el.scrollTop)}))},t.prototype.observeResize=function(){var e=this;this.$el.addEventListener("resize",(function(t){o.default.SET_SCROLL(e.$el.scrollTop)}))},t.prototype.observeComposition=function(){this.$el.addEventListener("compositionstart",(function(e){o.default.SET_COMPOSITION_ACTIVE(!0),o.default.SET_COMPOSITION_RECTS([])})),this.$el.addEventListener("compositionupdate",(function(e){o.default.SET_COMPOSITION_TEXT(e.data),o.default.SET_COMPOSITION_ACTIVE(!0)})),this.$el.addEventListener("compositionend",(function(e){o.default.SET_COMPOSITION_ACTIVE(!1),o.default.SET_COMPOSITION_RECTS([])}))},t.prototype.observeKeyEvent=function(){this.$el.addEventListener("keydown",(function(e){o.default.SET_KEYBOARD_EVENT(e)}))},t}(n(1).default);t.default=s},function(e,t,n){(function(e){var r=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++)n[t[r]]=Object.getOwnPropertyDescriptor(e,t[r]);return n},i=/%[sdj%]/g;t.format=function(e){if(!g(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(a(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,s=String(e).replace(i,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),l=r[n];n<o;l=r[++n])y(l)||!E(l)?s+=" "+l:s+=" "+a(l);return s},t.deprecate=function(n,r){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(r);e.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,s={};function a(e,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),h(n)?r.showHidden=n:n&&t._extend(r,n),S(r.showHidden)&&(r.showHidden=!1),S(r.depth)&&(r.depth=2),S(r.colors)&&(r.colors=!1),S(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=l),c(r,e,r.depth)}function l(e,t){var n=a.styles[t];return n?"["+a.colors[n][0]+"m"+e+"["+a.colors[n][1]+"m":e}function u(e,t){return e}function c(e,n,r){if(e.customInspect&&n&&O(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return g(i)||(i=c(e,i,r)),i}var o=function(e,t){if(S(t))return e.stylize("undefined","undefined");if(g(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(v(t))return e.stylize(""+t,"number");if(h(t))return e.stylize(""+t,"boolean");if(y(t))return e.stylize("null","null")}(e,n);if(o)return o;var s=Object.keys(n),a=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(n)),T(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return p(n);if(0===s.length){if(O(n)){var l=n.name?": "+n.name:"";return e.stylize("[Function"+l+"]","special")}if(b(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(m(n))return e.stylize(Date.prototype.toString.call(n),"date");if(T(n))return p(n)}var u,E="",_=!1,x=["{","}"];(f(n)&&(_=!0,x=["[","]"]),O(n))&&(E=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(E=" "+RegExp.prototype.toString.call(n)),m(n)&&(E=" "+Date.prototype.toUTCString.call(n)),T(n)&&(E=" "+p(n)),0!==s.length||_&&0!=n.length?r<0?b(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),u=_?function(e,t,n,r,i){for(var o=[],s=0,a=t.length;s<a;++s)C(t,String(s))?o.push(d(e,t,n,r,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(d(e,t,n,r,i,!0))})),o}(e,n,r,a,s):s.map((function(t){return d(e,n,r,a,t,_)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,E,x)):x[0]+E+x[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,n,r,i,o){var s,a,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(a=e.stylize("[Setter]","special")),C(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(l.value)<0?(a=y(n)?c(e,l.value,null):c(e,l.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),S(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function f(e){return Array.isArray(e)}function h(e){return"boolean"==typeof e}function y(e){return null===e}function v(e){return"number"==typeof e}function g(e){return"string"==typeof e}function S(e){return void 0===e}function b(e){return E(e)&&"[object RegExp]"===_(e)}function E(e){return"object"==typeof e&&null!==e}function m(e){return E(e)&&"[object Date]"===_(e)}function T(e){return E(e)&&("[object Error]"===_(e)||e instanceof Error)}function O(e){return"function"==typeof e}function _(e){return Object.prototype.toString.call(e)}function x(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(S(o)&&(o=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!s[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=e.pid;s[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,r,e)}}else s[n]=function(){};return s[n]},t.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=f,t.isBoolean=h,t.isNull=y,t.isNullOrUndefined=function(e){return null==e},t.isNumber=v,t.isString=g,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=S,t.isRegExp=b,t.isObject=E,t.isDate=m,t.isError=T,t.isFunction=O,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(12);var L=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function k(){var e=new Date,t=[x(e.getHours()),x(e.getMinutes()),x(e.getSeconds())].join(":");return[e.getDate(),L[e.getMonth()],t].join(" ")}function C(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",k(),t.format.apply(t,arguments))},t.inherits=n(13),t._extend=function(e,t){if(!t||!E(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e};var w="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function j(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(w&&e[w]){var t;if("function"!=typeof(t=e[w]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,w,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,r=new Promise((function(e,r){t=e,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(e,r){e?n(e):t(r)}));try{e.apply(this,i)}catch(e){n(e)}return r}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),w&&Object.defineProperty(t,w,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,r(e))},t.promisify.custom=w,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,s=function(){return i.apply(o,arguments)};t.apply(this,n).then((function(t){e.nextTick(s,null,t)}),(function(t){e.nextTick(j,t,s)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,r(t)),n}}).call(this,n(11))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var l,u=[],c=!1,p=-1;function d(){c&&l&&(c=!1,l.length?u=l.concat(u):p=-1,u.length&&f())}function f(){if(!c){var e=a(d);c=!0;for(var t=u.length;t;){for(l=u,u=[];++p<t;)l&&l[p].run();p=-1,t=u.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||c||a(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),s=n(0),a=n(15),l=n(16),u=function(e){function t(){var t=e.call(this)||this;t.$el=t.h("div","koji-editor-display"),t.srcPanel=t.h("div","koji-editor-src-panel"),t.$el.appendChild(t.srcPanel);var n=t.h("div","koji-editor-line");return t.srcPanel.appendChild(n),t.add(new l.default),s.default.$watch("src",(function(){return t.onSrcChange()})),s.default.$watch(["selection","src","focus"],(function(){t.updateSelecttionRects(),t.updateCaretPos()})),s.default.$watch("scroll",(function(){var e=t.$el.scrollWidth-t.$el.clientWidth-s.default.state.scroll;t.$el.scrollTo(e,0)})),s.default.$watch("keyboardEvent",(function(){var e=s.default.state.keyboardEvent;e&&["ArrowUp","ArrowLeft","ArrowRight","ArrowDown"].includes(e.key)&&(s.default.SET_REQUESTED_SELECTION(t.proposeSelection(e)),e.preventDefault())})),t}return i(t,e),Object.defineProperty(t.prototype,"lines",{get:function(){return this.$el.getElementsByClassName("koji-editor-line")},enumerable:!0,configurable:!0}),t.prototype.proposeSelection=function(e){var t=s.default.state.src.text,n=s.default.selectionWithLineNum,r=s.default.state.selection,i=r.start,o=r.end;switch(e.key){case"ArrowUp":if(i>0)return e.shiftKey?{start:i-1,end:o}:{start:i-1,end:i-1};break;case"ArrowDown":if(o<t.length)return e.shiftKey?{start:i,end:o+1}:{start:o+1,end:o+1};case"ArrowRight":var a=s.default.prevLine,l=0;return void 0===a?{start:i,end:o}:(l=n.start.pos<=a.length?this.inlinePosToAbsolutePos(n.start.linenum-1,n.start.pos):i-n.end.pos-1,e.shiftKey?{start:l,end:o}:{start:l,end:l});case"ArrowLeft":var u=s.default.nextLine;console.log("next line",u);var c=0;return void 0===u?{start:i,end:o}:(c=n.end.pos<=u.length?this.inlinePosToAbsolutePos(n.end.linenum+1,n.end.pos):this.inlinePosToAbsolutePos(n.end.linenum+1,u.length),e.shiftKey?{start:i,end:c}:{start:c,end:c})}return{start:i,end:o}},t.prototype.inlinePosToAbsolutePos=function(e,t){var n=s.default.state.src.text,r=0;return n.split("\n").slice(0,e).forEach((function(e){return r+=e.length+1})),r+=t},t.prototype.resize=function(e,t){this.$el.style.width=e+"px",this.$el.style.height=t+"px"},t.prototype.renderLine=function(e){var t=new a.default(e).tokenize().map((function(e){return'<span class="token '+e.type+'">'+e.value+"</span>"})).join(""),n=this.h("div","koji-editor-line");return n.innerHTML=t,n},t.prototype.lineAt=function(e){return this.srcPanel.childNodes.item(e)},t.prototype.deleteLines=function(e){for(var t=[],n=e.start;n<=e.end;n++)t.push(this.lineAt(n));for(var r=0,i=t;r<i.length;r++){var o=i[r];o&&this.srcPanel.removeChild(o)}},t.prototype.insertLineAt=function(e,t){var n,r=this.renderLine(e),i=this.srcPanel.getElementsByClassName("koji-editor-line");0==i.length?this.srcPanel.appendChild(r):(n=t<i.length?i[t]:i[-1],this.srcPanel.insertBefore(r,n))},t.prototype.renderAll=function(){var e=this;this.srcPanel.innerHTML="",s.default.state.src.text.split("\n").forEach((function(t){var n=e.renderLine(t);e.srcPanel.appendChild(n)}))},t.prototype.updateCaretPos=function(){var e=s.default.selectionWithLineNum,t=this.$el.getElementsByClassName("koji-editor-line")[e.start.linenum],n=this.srcPanel.getBoundingClientRect();if(t.textContent){var r=this.createRelativeRect(t,e.start.pos,e.end.pos);s.default.SET_CARET_POS(r.x,r.y)}else{r=t.getBoundingClientRect();s.default.SET_CARET_POS(r.x-n.x,r.y-n.y)}},t.prototype.updateSelecttionRects=function(){var e=[],t=s.default.selectionWithLineNum,n=this.$el.getElementsByClassName("koji-editor-line");if(t.start.linenum==t.end.linenum){if((l=n[t.start.linenum]).textContent){var r=this.createRelativeRect(l,t.start.pos,t.end.pos);e.push(r)}}else{var i=n[t.start.linenum],o=n[t.end.linenum];i.textContent&&e.push(this.createRelativeRect(i,t.start.pos,i.textContent.length)),o.textContent&&e.push(this.createRelativeRect(o,0,t.end.pos));for(var a=t.start.linenum+1;a<t.end.linenum;a++){var l;(l=n[a]).textContent&&e.push(this.createRelativeRect(l,0,l.textContent.length))}}s.default.SET_SELETECTED_RECTS(e)},t.prototype.getLinePos=function(e){for(var t=s.default.state.src.text,n=0,r=0,i=0;i<t.length;i++){if(i==e)return{pos:r,lineNum:n};"\n"===t[i]?(n++,r=0):r++}return{pos:r,lineNum:n}},t.prototype.selectionToRects=function(e,t){var n,r,i=[],o=this.lines,s=this.getLinePos(e),a=this.getLinePos(t);if(s.lineNum==a.lineNum){if(s.pos==a.pos)return[];var l=o[s.lineNum],u=this.createRelativeRect(l,s.pos,a.pos);i.push(u)}else{var c=o[s.lineNum],p=this.createRelativeRect(c,s.pos,(null===(n=c.textContent)||void 0===n?void 0:n.length)||0),d=o[a.lineNum],f=this.createRelativeRect(d,0,a.pos);i.push(p),i.push(f);for(var h=s.lineNum+1;h<a.lineNum;h++){l=o[h],u=this.createRelativeRect(l,0,(null===(r=l.textContent)||void 0===r?void 0:r.length)||0);i.push(u)}}return i},t.prototype.walkDOM=function(e,t){for(t(e),e=e?e.firstChild:null;e;)this.walkDOM(e,t),e=e.nextSibling},t.prototype.createRelativeRect=function(e,t,n){var r=document.createRange();if(null==e.firstChild)throw Error;var i=0,o=e,s=e,a=0,l=0;if(this.walkDOM(e,(function(e){if(e&&e.nodeType==Node.TEXT_NODE&&e.textContent)for(var r=e.textContent.split(""),u=0,c=0;c<r.length;c++)u++,++i===t&&(o=e,a=u),i===n&&(s=e,l=u)})),!o||!s)throw Error("node not found");r.setStart(o,a),r.setEnd(s,l);var u=this.srcPanel.getBoundingClientRect(),c=r.getBoundingClientRect();return c.x=c.x-u.x,c.y=c.y-u.y,r.detach(),c},t.prototype.onSrcChange=function(){if(!s.default.state.input.inputEvent)return this.renderAll();switch(s.default.state.input.inputEvent.inputType){case"insertText":this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"insertLineBreak":this.deleteLines(s.default.prevSelectedLines);var e=s.default.lines[s.default.currentSelectedLines.start-1],t=s.default.lines[s.default.currentSelectedLines.start];this.insertLineAt(e,s.default.prevSelectedLines.end),this.insertLineAt(t,s.default.prevSelectedLines.end+1);break;case"insertCompositionText":this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"insertFromPaste":case"insertFromPasteAsQuotation":case"insertFromDrop":case"insertReplacementText":case"insertFromYank":this.renderAll();break;case"deleteWordBackward":this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"deleteWordForward":"\n"!=s.default.nextChar||s.default.inputHasSelection||this.deleteLines(s.default.prevSelectedLines),this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"deleteSoftLineBackward":this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"deleteSoftLineForward":"\n"!=s.default.nextChar||s.default.inputHasSelection||this.deleteLines(s.default.prevSelectedLines),this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"deleteEntireSoftLine":case"deleteHardLineBackward":this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"deleteHardLineForward":"\n"!=s.default.nextChar||s.default.inputHasSelection||this.deleteLines(s.default.prevSelectedLines),this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"deleteByDrag":case"deleteByCut":case"deleteContent":this.renderAll();break;case"deleteContentBackward":if(0==s.default.prevPos.char){var n=s.default.prevSelectedLines,r=n.start,i=n.end;this.deleteLines({start:r-1,end:i}),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.start-1)}else this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.start);break;case"deleteContentForward":"\n"!=s.default.nextChar||s.default.inputHasSelection||this.deleteLines(s.default.prevSelectedLines),this.deleteLines(s.default.prevSelectedLines),this.insertLineAt(s.default.currentLine,s.default.prevSelectedLines.end);break;case"historyUndo":case"historyRedo":this.renderAll()}},t}(o.default);t.default=u},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),s=function(e){function t(t){var n=e.call(this,t)||this;return n.tokenIndex=0,n.brackets={"（":"FURIGANA_START","）":"FURIGANA_END","｛":"KAERI_START","｝":"KAERI_END","〔":"OKURIGANA_START","〕":"OKURIGANA_END","【":"ANNO_START","】":"ANNO_END"},n.is=new o.InputStream(t),n.state={brackets:[],errors:[],inInlinePre:!1,inInlineBody:!1,inBlockTag:!1,inFurigana:!1,inKaeriten:!1,inOkurigana:!1,inAnno:!1},n}return i(t,e),t.prototype.isBracket=function(e){return"（）｛｝【】〔〕".indexOf(e)>-1},t.prototype.isColon=function(e){return"："===e},t.prototype.isLetter=function(e){return[/[\u0020-\u007E]/,/[\u2000-\u206F]/,/[\u4E00-\u9FEA\u3400-\u4DFF]/,/[\u3040-\u309F]/,/[\u30A0-\u30FF\u31F0-\u31FF]/,/[\u1B000-\u1B000\u1B100-\u1B12F]/,/[\u3190-\u319F]/,/[\u3000-\u3007\u300C-\u300F\u3012-\u3013\u3016-\u303F]/,/[\uFF00-\uFF02\uFF04-\uFF07\uFF0B-\uFF0E\uFF10-\uFF19\uFF1B-\uFF3A\uFF3E-\uFF5A\uFF5E-\uFFEF]/].some((function(t){return null!=e.match(t)}))},t.prototype.isMatchingPair=function(e,t){return"《"===e&&"》"===t||"（"===e&&"）"===t||"｛"===e&&"｝"===t||"〔"===e&&"〕"===t||"［"===e&&"］"===t||"［／"===e&&"］"===t||"【"===e&&"】"===t},t.prototype.readWhile=function(e){for(var t="";!this.is.eof()&&e(this.is.peek());)t+=this.is.next();return t},t.prototype.readTextSegment=function(){var e=this.readWhile(this.isLetter);return this.state.inInlinePre?{type:"INLINE_NAME",value:e}:this.state.inBlockTag?{type:"BLOCK_NAME",value:e}:this.state.inFurigana?{type:"FURIGANA",value:e}:this.state.inKaeriten?{type:"KAERITEN",value:e}:this.state.inOkurigana?{type:"OKURIGANA",value:e}:this.state.inAnno?{type:"ANNOTATION",value:e}:{type:"TEXT_SEGMENT",value:e}},t.prototype.readBracket=function(){var e,t=this.is.next();if("｛（【〔".indexOf(t)>-1)e={type:this.brackets[t],value:t},this.state.brackets.push(e),"（"===t&&(this.state.inFurigana=!0),"｛"===t&&(this.state.inKaeriten=!0),"〔"===t&&(this.state.inOkurigana=!0),"【"===t&&(this.state.inAnno=!0);else{e={type:this.brackets[t],value:t};var n=this.state.brackets[this.state.brackets.length-1];n&&this.isMatchingPair(n.value,t)?(this.state.brackets.pop(),n.pairIndex=this.tokenIndex,e.pairIndex=n.tokenIndex):(this.state.brackets.push(e),e.error=!0,e.errorMsg="対応する括弧がありません．"),"）"===t&&(this.state.inFurigana=!1),"｝"===t&&(this.state.inKaeriten=!1),"〕"===t&&(this.state.inOkurigana=!1),"】"===t&&(this.state.inAnno=!1)}return e},t.prototype.readInlineStart=function(){var e=this.is.next();this.state.inInlinePre=!0;var t={type:"INLINE_START",value:e};return this.state.brackets.push(t),t},t.prototype.readInlineEnd=function(){var e={type:"INLINE_END",value:this.is.next()};this.state.inInlinePre=!1,this.state.inInlineBody=!1;var t=this.state.brackets[this.state.brackets.length-1];return t&&"INLINE_START"===t.type?(this.state.brackets.pop(),t.pairIndex=this.tokenIndex,e.pairIndex=t.tokenIndex):(e.error=!0,e.errorMsg="対応する括弧がありません．"),e},t.prototype.readID=function(){var e=this.is.next(),t=this.readWhile(this.isLetter);return this.state.inInlinePre||this.state.inBlockTag?{type:"ID",value:e+t}:{type:"UNKNOWN",value:e+t,error:!0,errorMsg:"ここにIDは書けません"}},t.prototype.readClass=function(){var e=this.is.next(),t=this.readWhile(this.isLetter);return this.state.inInlinePre||this.state.inBlockTag?{type:"CLASS",value:e+t}:{type:"UNKNOWN",value:e+t,error:!0,errorMsg:"ここにクラスは書けません"}},t.prototype.readBlockStart=function(){var e,t=this.is.next();return this.state.inBlockTag=!0,e="／"===this.is.peek()?{type:"BLOCK_CLOSING_START",value:t+this.is.next()}:{type:"BLOCK_START",value:t},this.state.brackets.push(e),e},t.prototype.readBlockEnd=function(){var e=this.is.next();this.state.inBlockTag=!1;var t={type:"BLOCK_END",value:e},n=this.state.brackets[this.state.brackets.length-1];return!n||"BLOCK_START"!==n.type&&"BLOCK_CLOSING_START"!==n.type?(t.error=!0,t.errorMsg="対応する括弧がありません．"):(this.state.brackets.pop(),n.pairIndex=this.tokenIndex,t.pairIndex=n.tokenIndex),t},t.prototype.readColon=function(){return this.state.inInlinePre&&(this.state.inInlinePre=!1,this.state.inInlineBody=!0),{type:"COLON",value:this.is.next()}},t.prototype.readSep=function(){return this.state.inInlineBody?{type:"INLINE_SEP",value:this.is.next()}:{type:"FURIGANA_SEP",value:this.is.next()}},t.prototype.readLineBreak=function(){var e=this.is.next();return this.state.inInlinePre||this.state.inBlockTag||this.state.inKaeriten||this.state.inOkurigana?{type:"LB",value:e,error:!0,errorMsg:"ここに改行を含めることはできません。"}:{type:"LB",value:e,error:!1}},t.prototype.readNext=function(){if(this.is.eof())return null;var e=this.is.peek(),t=this.is.pos,n=null;return"《"===e&&(n=this.readInlineStart()),"》"===e&&(n=this.readInlineEnd()),"［"===e&&(n=this.readBlockStart()),"］"===e&&(n=this.readBlockEnd()),"｜"===e&&(n=this.readSep()),"＃"===e&&(n=this.readID()),"＊"===e&&(n=this.readClass()),this.isLetter(e)&&(n=this.readTextSegment()),this.isBracket(e)&&(n=this.readBracket()),this.isColon(e)&&(n=this.readColon()),"\n"===e&&(n=this.readLineBreak()),n||(n={type:"UNKNOWN",value:e=this.is.next(),error:!0,errorMsg:"不正な文字："+e}),n.start=t,n.end=this.is.pos,n.tokenIndex=this.tokenIndex++,n},t.prototype.tokenize=function(){for(var e=[];this.peek();)e.push(this.next());return this.state.brackets.forEach((function(e){e.error=!0,e.errorMsg="対応する括弧がありません．"})),e},t}(n(2).default);t.default=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),s=n(0),a=function(e){function t(){var t=e.call(this)||this;return t.$el=t.h("div","koji-editor-overlay"),t.caret=t.h("span","koji-editor-caret"),t.$el.appendChild(t.caret),t.hideCaret(),t.selDivs=[],t.compositionDivs=[],s.default.$watch("editorSize",(function(){t.resize(s.default.state.editorSize.width,s.default.state.editorSize.height)})),s.default.$watch("scroll",(function(){var e=t.$el.scrollWidth-t.$el.clientWidth-s.default.state.scroll;t.$el.scrollTo(e,0)})),s.default.$watch("scrollWidth",(function(){t.$el.style.width=s.default.state.scrollWidth+"px"})),s.default.$watch("selectedRects",(function(){s.default.isRegionSelected,t.renderSelections()})),s.default.$watch(["caretPos"],(function(){return s.default.isRegionSelected?t.hideCaret():t.moveCaret()})),s.default.$watch("focus",(function(){s.default.state.focus?t.moveCaret():(t.hideCaret(),t.resetSelection())})),s.default.$watch("compositionRects",(function(){var e=s.default.state.compositionRects;t.resetCompositionRects(),e.forEach((function(e){var n=t.h("div","koji-editor-composition-bar");n.style.top=e.y+"px",n.style.left=e.x+"px",n.style.height=e.height+"px",n.style.width=e.width+"px",t.compositionDivs.push(n),t.$el.appendChild(n)}))})),t}return i(t,e),t.prototype.resetCompositionRects=function(){this.compositionDivs.forEach((function(e){e.remove()})),this.compositionDivs=[]},t.prototype.moveCaret=function(){this.caret.style.display="block",this.caret.style.top=s.default.state.caretPos.y+"px",this.caret.style.left=s.default.state.caretPos.x+"px"},t.prototype.hideCaret=function(){this.caret.style.display="none"},t.prototype.renderSelections=function(){var e=this,t=s.default.state.selectedRects;this.resetSelection(),t.forEach((function(t){var n=document.createElement("div");n.classList.add("koji-editor-selection"),n.style.width=t.width+"px",n.style.height=t.height+"px",n.style.top=t.top+"px",n.style.left=t.left+"px",e.selDivs.push(n),e.$el.appendChild(n)}))},t.prototype.resetSelection=function(){this.selDivs.forEach((function(e){return e.remove()})),this.selDivs=[]},t.prototype.resize=function(e,t){this.$el.style.width=e+"px",this.$el.style.height=t+"px"},t}(o.default);t.default=a}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,